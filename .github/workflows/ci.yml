name: CI - AutoDevOps Agents

on:
  push:
    branches: [main]
  pull_request:

jobs:
  run-agents:
    name: 🚀 Full Multi-Agent Test Pipeline
    runs-on: ubuntu-latest

    steps:
    - name: 🕕️ Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install dependencies
      run: |
        pip install --upgrade pip
        pip install GitPython google-cloud-aiplatform google-cloud-pubsub google-cloud-bigquery python-dotenv
        for path in agents/*/requirements.txt; do pip install -r "$path"; done

    - name: 🔐 Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: 🛠️ Set environment variables
      run: |
        echo "PROJECT_ID=${{ secrets.GCP_PROJECT }}" >> $GITHUB_ENV
        echo "VERTEX_PROJECT_ID=${{ secrets.GCP_PROJECT }}" >> $GITHUB_ENV
        echo "VERTEX_LOCATION=us-central1" >> $GITHUB_ENV

    - name: 🧠 Run Code Reviewer Agent
      run: |
        git fetch origin main || true
        git diff --name-only origin/main...HEAD > changed.txt || touch changed.txt
        grep -E '\.(py|js|ts|java|cpp|c|go|sh|sql|jsx|tsx)$' changed.txt || true | while read file; do
          echo "📄 Reviewing $file"
          python agents/code-review-agent/main.py "$file"
        done

    - name: 🧪 Run Test Generator Agent
      run: |
        grep -E '\.(py|js|ts|java|cpp|c|go|sh|sql|jsx|tsx)$' changed.txt || true | while read file; do
          echo "🧪 Generating test for $file"
          python agents/Test_generator/main.py "$file"
        done

    - name: 🌟 Run CI/CD Agent
      run: |
        python agents/cicd_agent/main.py || true

    - name: 🔒 Run Security Agent
      run: |
        python agents/security_agent/main.py || true

    - name: 🕒 Wait for agent messages
      run: sleep 20

    - name: 📊 Query recent test results from BigQuery
      run: |
        bq query --use_legacy_sql=false "
          SELECT file_path, language, test_output, llm_summary
          FROM \`${{ secrets.GCP_PROJECT }}.devops_logs.test_results\`
          ORDER BY timestamp DESC LIMIT 3
        " > test_results.txt

    - name: 📊 Query recent security insights from BigQuery
      run: |
        bq query --use_legacy_sql=false "
          SELECT file_path, language, vulnerabilities, llm_explanation
          FROM \`${{ secrets.GCP_PROJECT }}.devops_logs.security_findings\`
          ORDER BY timestamp DESC LIMIT 3
        " > security_insights.txt

    - name: 📊 Query recent CI/CD events from BigQuery
      run: |
        bq query --use_legacy_sql=false "
          SELECT file_path, language, status, triggered_by
          FROM \`${{ secrets.GCP_PROJECT }}.devops_logs.cicd_events\`
          ORDER BY timestamp DESC LIMIT 3
        " > cicd_summary.txt

    - name: 📄 Show summaries from BigQuery
      run: |
        echo "--- 🧪 Test Results ---"
        cat test_results.txt
        echo "--- 🔐 Security Insights ---"
        cat security_insights.txt
        echo "--- 🌟 CI/CD Events ---"
        cat cicd_summary.txt

    - name: 🔍 Detect test failures
      id: testcheck
      run: |
        if grep -q FAIL test_results.txt || grep -q Traceback test_results.txt || grep -q AssertionError test_results.txt; then
          echo "fail=true" >> $GITHUB_OUTPUT
        else
          echo "fail=false" >> $GITHUB_OUTPUT
        fi

    - name: 📄 Upload generated test files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: generated-tests
        path: generated_tests
        if-no-files-found: warn

    - name: 🔐 Fail workflow if tests failed
      if: steps.testcheck.outputs.fail == 'true'
      run: |
        echo "🚨 Failing workflow due to detected test failures"
        exit 1

    - name: 🧹 Clean up BigQuery logs
      if: always()
      run: |
        bq query --use_legacy_sql=false "DELETE FROM \`${{ secrets.GCP_PROJECT }}.devops_logs.test_results\` WHERE TRUE"
        bq query --use_legacy_sql=false "DELETE FROM \`${{ secrets.GCP_PROJECT }}.devops_logs.security_findings\` WHERE TRUE"
        bq query --use_legacy_sql=false "DELETE FROM \`${{ secrets.GCP_PROJECT }}.devops_logs.cicd_events\` WHERE TRUE"
