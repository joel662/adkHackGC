name: CI - DevOps Copilot Agents

on:
  push:
    branches: [main]
  pull_request:

jobs:
  run-agents:
    name: 🚀 Full Multi-Agent Test Pipeline
    runs-on: ubuntu-latest

    steps:
    - name: 📅 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install global dependencies
      run: |
        pip install --upgrade pip
        pip install GitPython google-cloud-aiplatform google-cloud-pubsub google-cloud-bigquery python-dotenv

    - name: 📦 Install agent requirements
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f agents/code-review-agent/requirements.txt ]; then pip install -r agents/code-review-agent/requirements.txt; fi
        if [ -f agents/Test_generator/requirements.txt ]; then pip install -r agents/Test_generator/requirements.txt; fi
        if [ -f agents/cicd_agent/requirements.txt ]; then pip install -r agents/cicd_agent/requirements.txt; fi

    - name: 🔐 Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: 🛠️ Set environment variables
      run: |
        echo "PROJECT_ID=${{ secrets.GCP_PROJECT }}" >> $GITHUB_ENV
        echo "VERTEX_PROJECT_ID=${{ secrets.GCP_PROJECT }}" >> $GITHUB_ENV
        echo "VERTEX_LOCATION=us-central1" >> $GITHUB_ENV

    - name: 🧠 Run Code Reviewer Agent on changed source files
      run: |
        git fetch origin main || true
        git diff --name-only origin/main...HEAD > changed.txt || touch changed.txt
        grep -E '\.(py|js|ts|java|cpp|c|go|sh|sql|jsx|tsx)$' changed.txt || true | while read file; do
          echo "📄 Reviewing $file"
          python agents/code-review-agent/main.py "$file"
        done

    - name: ⌛ Wait for agents to complete
      run: sleep 15  # Allow time for Test Generator and CI/CD agents to process


    - name: 📊 Check recent test results from BigQuery
      run: |
        bq query --use_legacy_sql=false \
        "SELECT file_path, language, test_output, llm_summary FROM `${{ secrets.GCP_PROJECT }}.devops_logs.test_results` ORDER BY timestamp DESC LIMIT 3" > test_results.txt

    - name: 🔧 Show summary from BigQuery
      run: cat test_results.txt

    - name: 🔍 Check for test failures in output
      id: testcheck
      run: |
        if grep -q FAIL test_results.txt || grep -q Traceback test_results.txt || grep -q AssertionError test_results.txt; then
          echo "fail=true" >> $GITHUB_OUTPUT
        else
          echo "fail=false" >> $GITHUB_OUTPUT
        fi

    - name: 📄 Upload generated test files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: generated-tests
        path: generated_tests
    - name: 🔒 Fail workflow if tests failed
      if: steps.testcheck.outputs.fail == 'true'
      run: |
        echo "🚨 Failing job due to test failures"
        exit 1
